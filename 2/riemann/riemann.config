; -*- mode: clojure; -*-

(logging/init {:file "/var/log/riemann/riemann.log"})
(load-file "/app/etc/monitoring/etc/graphite.clj")
(load-file "/app/etc/monitoring/etc/collectd.clj")

(require 'riemann.client)
(require '[monitoring.etc.graphite :refer :all])
(require '[monitoring.etc.collectd :refer :all])

; Listen on the local interface over TCP (5555), UDP (5555), and websockets
; (5556)
(let [host "0.0.0.0"]
  (tcp-server {:host host})
  (udp-server {:host host})
  (ws-server  {:host host}))

; Expire old events from the index every 5 seconds.
(periodically-expire 10 {:keep-keys [:host :service :tags, :state, :description, :metric]})


(let [index (index)]
  ; Inbound events will be passed to these streams:
  (streams
    (default :ttl 60
      ; Index all events immediately.
      index

      (tagged "riemann"
        graph)

      (tagged "collectd"
        (smap rewrite-service graph)
        (tagged "notification"
          (changed-state {:init "ok"}
            (adjust [:service clojure.string/replace #"^processes-(.*)\/ps_count$" "$1"])))

           (where (and (expired? event)
                       (service #"^processes-.+\/ps_count\/processes"))
             (adjust [:service clojure.string/replace #"^processes-(.*)\/ps_count\/processes$" "$1"])))

       (where (service #".*")
         graph))))

; (repl-server {:host "0.0.0.0"})
; vim: set ft=clojure:

